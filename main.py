# main.py
# Python-telegram-bot 13.x
import os
import io
import logging
from math import pi
from typing import Dict, List

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InputMediaPhoto,
)
from telegram.ext import (
    Updater,
    CallbackContext,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
)

# ----------------------------- –õ–û–ì–ò -----------------------------
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("wheel-bot")

# ---------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø --------------------
TOKEN = os.environ["TG_BOT_TOKEN"]

# –•–æ—Å—Ç –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–ª—ç—à–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://tg-wheel-2.onrender.com
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "").rstrip("/")

# –ï—Å–ª–∏ –∑–∞–¥–∞—Ç—å 443 ‚Äî —è–≤–Ω–æ –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ URL –≤–µ–±—Ö—É–∫–∞. –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º.
FORCE_WEBHOOK_PORT = os.getenv("FORCE_WEBHOOK_PORT", "").strip()

# Render –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–π :443 ‚Üí –≤–Ω—É—Ç—Ä—å –Ω–∞ —ç—Ç–æ—Ç PORT (–æ–±—ã—á–Ω–æ 10000).
# –í URL –≤–µ–±—Ö—É–∫–∞ –µ–≥–æ –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º.
RAW_PORT = os.getenv("PORT", "10000")
PORT = int(RAW_PORT) if RAW_PORT else 10000

# –ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ ‚Äî –¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–º –∏ ¬´—Å–µ–∫—Ä–µ—Ç–Ω—ã–º¬ª (–ø–æ —Ç–æ–∫–µ–Ω—É)
WEBHOOK_PATH = f"/{TOKEN}"

if not WEBHOOK_HOST.startswith("http"):
    raise RuntimeError(
        "WEBHOOK_HOST –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü—Ä–∏–º–µ—Ä: https://tg-wheel-2.onrender.com"
    )

if FORCE_WEBHOOK_PORT:
    WEBHOOK_URL = f"{WEBHOOK_HOST}:{FORCE_WEBHOOK_PORT}{WEBHOOK_PATH}"
else:
    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

log.info("Resolved local PORT=%s (raw=%r)", PORT, RAW_PORT)
log.info("Webhook URL will be set to: %s", WEBHOOK_URL)

# --------------------------- –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê -----------------------
QUESTIONS = [
    "1) –•–≤–∞—Ç–∞–µ—Ç –ª–∏ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏? (0‚Äì5)",
    "2) –ï—Å—Ç—å –ª–∏ –ø–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤? (0‚Äì5)",
    "3) –î–æ–≤–æ–ª—å–Ω—ã –ª–∏ –≤—ã —É—á—ë—Ç–æ–º –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤? (0‚Äì5)",
    "4) –£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏? (0‚Äì5)",
    "5) –†–µ–≥—É–ª—è—Ä–Ω–æ –ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ø–æ –ø–ª–∞–Ω—É? (0‚Äì5)",
    "6) –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–µ–Ω—Å–∏–∏/–¥–æ–ª–≥–æ—Å—Ä–æ–∫–µ? (0‚Äì5)",
    "7) –ï—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤ (–∂–∏–∑–Ω—å/–∑–¥–æ—Ä–æ–≤—å–µ/–∏–º—É—â–µ—Å—Ç–≤–æ)? (0‚Äì5)",
    "8) –ù–∞—Å–∫–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã –≤ —Å–µ–º—å–µ/–ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ? (0‚Äì5)",
]
NUM_Q = len(QUESTIONS)

ASKING, = range(1)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_answers: Dict[int, List[int]] = {}


def start(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_answers[user_id] = []

    kb = [["0", "1", "2", "3", "4", "5"]]
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ 8 —Å—Ñ–µ—Ä–∞–º.\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ —á–∏—Å–ª–∞–º–∏ 0‚Äì5. –ü–æ–µ—Ö–∞–ª–∏!\n\n" + QUESTIONS[0],
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True),
    )
    return ASKING


def handle_score(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    text = (update.message.text or "").strip()

    # –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∏—Å–ª–æ
    if text not in {"0", "1", "2", "3", "4", "5"}:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 5.")
        return ASKING

    score = int(text)
    user_answers.setdefault(user_id, []).append(score)
    idx = len(user_answers[user_id])

    if idx < NUM_Q:
        kb = [["0", "1", "2", "3", "4", "5"]]
        update.message.reply_text(
            QUESTIONS[idx],
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True),
        )
        return ASKING

    # –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –µ—Å—Ç—å ‚Äî —Å—á–∏—Ç–∞–µ–º –∏ –æ—Ç–¥–∞–µ–º –∫–æ–ª–µ—Å–æ
    scores = user_answers[user_id][:NUM_Q]
    del user_answers[user_id]  # –ø–æ—á–∏—Å—Ç–∏–º

    png_bytes = render_wheel_png(scores)
    caption = make_summary_text(scores)

    # –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É (–∏ —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç)
    update.message.reply_photo(
        photo=png_bytes,
        caption=caption,
        reply_markup=ReplyKeyboardRemove(),
    )

    # —á–µ–∫-–ª–∏—Å—Ç
    checklist = make_checklist(scores)
    update.message.reply_text(checklist)

    update.message.reply_text(
        "–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ ‚Äî /start",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END


def cancel(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_answers.pop(user_id, None)
    update.message.reply_text("–û–∫–µ–π, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª. –ñ–¥—É –≤–∞—Å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç ‚Äî /start")
    return ConversationHandler.END


def make_summary_text(scores: List[int]) -> str:
    avg = sum(scores) / len(scores)
    if avg >= 4.5:
        mood = "–û—á–µ–Ω—å –º–æ—â–Ω–æ! –í—ã –∫—Ä—É—Ç–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –¥–µ–Ω—å–≥–∞–º–∏ üëè"
    elif avg >= 3.5:
        mood = "–•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å. –ù–µ–º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ —Ä–æ—Å—Ç–∞ ‚Äî –∏ –±—É–¥–µ—Ç —Ç–æ–ø ‚ú®"
    elif avg >= 2.5:
        mood = "–°—Ä–µ–¥–Ω–µ: —É–∂–µ –µ—Å—Ç—å –±–∞–∑–∞, —Å—Ç–æ–∏—Ç –ø–æ–¥—Ç—è–Ω—É—Ç—å —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ üí™"
    else:
        mood = "–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∏–∑–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ üëç"

    return (
        f"–í–∞—à–∏ –±–∞–ª–ª—ã: {', '.join(map(str, scores))}\n"
        f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg:.2f}/5\n\n{mood}"
    )


def make_checklist(scores: List[int]) -> str:
    items = [
        "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏",
        "–ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–£—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤",
        "–î–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞",
        "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø–æ –ø–ª–∞–Ω—É",
        "–ü–µ–Ω—Å–∏—è/–¥–æ–ª–≥–æ—Å—Ä–æ–∫",
        "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤",
        "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–º—å–µ",
    ]
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç —Å–ª–∞–±—ã—Ö –∫ —Å–∏–ª—å–Ω—ã–º
    order = sorted(range(len(scores)), key=lambda i: scores[i])
    lines = ["–¢–æ–ø-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π (—Å–Ω–∞—á–∞–ª–∞ —Å–ª–∞–±—ã–µ):"]
    for i in order[:3]:
        s = scores[i]
        label = items[i]
        lines.append(f"‚Ä¢ {label}: —Å–µ–π—á–∞—Å {s}/5 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ 1‚Äì2 —à–∞–≥–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    return "\n".join(lines)


# ------------------- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ¬´–∫–æ–ª–µ—Å–∞¬ª (PNG) -------------------
def render_wheel_png(values: List[int]) -> io.BytesIO:
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç ¬´–∫–æ–ª–µ—Å–æ¬ª –∫–∞–∫ —Ä–∞–¥–∏–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É (0‚Äì5).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO (–≥–æ—Ç–æ–≤–æ –¥–ª—è send_photo).
    """
    import matplotlib
    matplotlib.use("Agg")
    import matplotlib.pyplot as plt
    import numpy as np

    labels = [
        "–¶–µ–ª–∏",
        "–ü–æ–¥—É—à–∫–∞",
        "–£—á—ë—Ç",
        "–î–æ–ª–≥–∏",
        "–ò–Ω–≤–µ—Å—Ç.",
        "–î–æ–ª–≥–æ—Å—Ä–æ–∫",
        "–°—Ç—Ä–∞—Ö–æ–≤–∫–∏",
        "–°–µ–º—å—è",
    ]

    # –Ω–æ—Ä–º–∏—Ä—É–µ–º –≤ 0..1 –¥–ª—è —Ä–∞–¥–∏–∞–ª—å–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    v = np.array(values, dtype=float) / 5.0
    angles = np.linspace(0, 2 * pi, len(labels), endpoint=False)
    v = np.concatenate([v, [v[0]]])
    angles = np.concatenate([angles, [angles[0]]])

    fig = plt.figure(figsize=(6, 6), dpi=160)
    ax = fig.add_subplot(111, polar=True)
    ax.set_theta_offset(pi / 2)
    ax.set_theta_direction(-1)

    ax.set_thetagrids(angles[:-1] * 180/pi, labels, fontsize=10)
    ax.set_rgrids([0.2, 0.4, 0.6, 0.8, 1.0], labels=["1", "2", "3", "4", "5"], angle=0)

    # –†–∞–¥–∏–∞–ª—å–Ω—ã–π ¬´–ø–æ–ª–∏–≥–æ–Ω–∏–∫¬ª
    ax.plot(angles, v, linewidth=2)
    ax.fill(angles, v, alpha=0.25)

    ax.set_ylim(0, 1.0)
    ax.grid(True, alpha=0.25)

    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format="png")
    plt.close(fig)
    buf.seek(0)
    return buf


# --------------------------- TELEGRAM BOT -----------------------
def build_conv() -> ConversationHandler:
    kb = [["0", "1", "2", "3", "4", "5"]]
    return ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASKING: [
                MessageHandler(Filters.text & ~Filters.command, handle_score)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True,
        per_message=False,
    )


def main() -> None:
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    dp.add_handler(build_conv())
    dp.add_handler(CommandHandler("cancel", cancel))

    # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    try:
        updater.bot.delete_webhook()
    except Exception as e:
        log.warning("delete_webhook() warning: %s", e)

    ok = updater.bot.set_webhook(WEBHOOK_URL, timeout=30)
    log.info("set_webhook(): %s", ok)

    # –ü–æ–¥–Ω–∏–º–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—Ç—É (Render —Å–∞–º –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç 443 ‚Üí —ç—Ç–æ—Ç –ø–æ—Ä—Ç)
    updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,   # –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å WEBHOOK_PATH
        # webhook_url –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —Ç—É—Ç, —Ç.–∫. —É–∂–µ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –≤—ã—à–µ —á–µ—Ä–µ–∑ set_webhook()
    )
    log.info("Webhook server started on 0.0.0.0:%d path=%s", PORT, WEBHOOK_PATH)

    # –ì–æ—Ç–æ–≤–æ
    updater.idle()


if __name__ == "__main__":
    main()
