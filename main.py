import os
import io
import logging
from math import pi
from typing import Dict, List, Tuple

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler,
)

# =============== –õ–û–ì–ò ===============
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("finance-wheel")

# =============== –¢–û–ö–ï–ù ===============
TOKEN = os.getenv("TG_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("TG_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# =============== –î–ê–ù–ù–´–ï –û–ü–†–û–°–ê ===============
QUESTIONS = [
    "1) –•–≤–∞—Ç–∞–µ—Ç –ª–∏ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏? (0‚Äì5)",
    "2) –ï—Å—Ç—å –ª–∏ –ø–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ 3‚Äì6 –º–µ—Å—è—Ü–µ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤? (0‚Äì5)",
    "3) –î–æ–≤–æ–ª—å–Ω—ã –ª–∏ –≤—ã —É—á—ë—Ç–æ–º –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤? (0‚Äì5)",
    "4) –£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏? (0‚Äì5)",
    "5) –†–µ–≥—É–ª—è—Ä–Ω–æ –ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ø–æ –ø–ª–∞–Ω—É? (0‚Äì5)",
    "6) –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–µ–Ω—Å–∏–∏/–¥–æ–ª–≥–æ—Å—Ä–æ–∫–µ? (0‚Äì5)",
    "7) –ï—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤ (–∂–∏–∑–Ω—å/–∑–¥–æ—Ä–æ–≤—å–µ/–∏–º—É—â–µ—Å—Ç–≤–æ)? (0‚Äì5)",
    "8) –ù–∞—Å–∫–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã –≤ —Å–µ–º—å–µ/–ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ? (0‚Äì5)",
]
FACETS = [
    "–¶–µ–ª–∏", "–ü–æ–¥—É—à–∫–∞", "–£—á—ë—Ç", "–î–æ–ª–≥–∏",
    "–ò–Ω–≤–µ—Å—Ç.", "–î–æ–ª–≥–æ—Å—Ä–æ–∫", "–°—Ç—Ä–∞—Ö–æ–≤–∫–∏", "–°–µ–º—å—è",
]
NUM_Q = len(QUESTIONS)

ASKING, = range(1)

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
user_answers: Dict[int, List[int]] = {}


# =============== –•–ï–õ–ü–ï–†–´ –¢–ï–ö–°–¢–ê ===============
def make_summary_text(scores: List[int]) -> str:
    avg = sum(scores) / len(scores)
    if avg >= 4.5:
        mood = "–û—á–µ–Ω—å –º–æ—â–Ω–æ! –í—ã –∫—Ä—É—Ç–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –¥–µ–Ω—å–≥–∞–º–∏ üëè"
    elif avg >= 3.5:
        mood = "–•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å. –ù–µ–º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ —Ä–æ—Å—Ç–∞ ‚Äî –∏ –±—É–¥–µ—Ç —Ç–æ–ø ‚ú®"
    elif avg >= 2.5:
        mood = "–°—Ä–µ–¥–Ω–µ: –±–∞–∑–∞ –µ—Å—Ç—å, –ø–æ–¥—Ç—è–Ω–∏—Ç–µ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ üí™"
    else:
        mood = "–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∏–∑–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ üëç"
    return (
        f"–í–∞—à–∏ –±–∞–ª–ª—ã: {', '.join(map(str, scores))}\n"
        f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg:.2f}/5\n\n{mood}"
    )


def make_checklist(scores: List[int]) -> str:
    # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ñ–µ—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –±–∞–ª–ª–æ–≤
    order = sorted(range(len(scores)), key=lambda i: scores[i])
    lines = ["–¢–û–ü-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π:"]
    for i in order[:3]:
        lines.append(f"‚Ä¢ {FACETS[i]} ‚Äî —Å–µ–π—á–∞—Å {scores[i]}/5 ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ 1‚Äì2 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    return "\n".join(lines)


# =============== –û–¢–†–ò–°–û–í–ö–ê –ö–û–õ–ï–°–ê (–ù–û–í–´–ô –°–¢–ò–õ–¨) ===============
def _build_figure(scores: List[int]):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (fig, ax) ‚Äî —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ä–∞–¥–∏–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    –≤ —Å–ø–æ–∫–æ–π–Ω–æ–π –ø–∞—Å—Ç–µ–ª—å–Ω–æ–π –ø–∞–ª–∏—Ç—Ä–µ —Å –º—è–≥–∫–∏–º–∏ —Ç–µ–Ω—è–º–∏.
    """
    import matplotlib
    matplotlib.use("Agg")
    import matplotlib.pyplot as plt
    import numpy as np

    # –ù–æ—Ä–º–∏—Ä—É–µ–º –∫ 0..1
    vals = (np.array(scores, dtype=float) / 5.0).clip(0, 1)
    angles = np.linspace(0, 2 * pi, len(FACETS), endpoint=False)
    vals = np.concatenate([vals, [vals[0]]])
    angles = np.concatenate([angles, [angles[0]]])

    # –§–∏–≥—É—Ä–∞
    fig = plt.figure(figsize=(7, 7), dpi=160)
    ax = fig.add_subplot(111, polar=True)

    # –°—Ç–∏–ª—å: —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω + –º—è–≥–∫–∞—è —Å–µ—Ç–∫–∞
    fig.patch.set_facecolor("#FFFFFF")
    ax.set_facecolor("#FBFBFD")

    # –ù–∞–∫–ª–æ–Ω ¬´—Å–≤–µ—Ä—Ö—É¬ª –∏ –ø–æ —á–∞—Å–æ–≤–æ–π
    ax.set_theta_offset(pi / 2)
    ax.set_theta_direction(-1)

    # –ü–æ–¥–ø–∏—Å–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤
    ax.set_thetagrids(angles[:-1] * 180/pi, FACETS, fontsize=11, color="#2C2C2C")

    # –†–∞–¥–∏–∞–ª—å–Ω—ã–µ –∫—Ä—É–≥–∏ (–ª—ë–≥–∫–∞—è —Å–µ—Ç–∫–∞)
    ax.set_rgrids([0.2, 0.4, 0.6, 0.8, 1.0], labels=["1", "2", "3", "4", "5"], angle=0, color="#A0A0A0")
    ax.set_ylim(0, 1.0)
    for gridline in ax.yaxis.get_gridlines():
        gridline.set_linestyle("-")
        gridline.set_linewidth(0.6)
        gridline.set_alpha(0.25)

    # –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞
    fill_color = "#7C9CF3"   # –≤–∞—Å–∏–ª—å–∫–æ–≤—ã–π
    line_color = "#3D6AF2"   # –Ω–∞—Å—ã—â—ë–Ω–Ω—ã–π —Å–∏–Ω–∏–π
    point_color = "#2B56E0"

    # ¬´–¢–µ–Ω—å¬ª (—Å–ª–µ–≥–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞)
    ax.fill(angles, (vals * 0.98), color="#1E3A8A", alpha=0.07, zorder=1)

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª–∏–≥–æ–Ω
    ax.plot(angles, vals, color=line_color, linewidth=2.2, zorder=3)
    ax.fill(angles, vals, color=fill_color, alpha=0.28, zorder=2)

    # –¢–æ—á–∫–∏
    ax.scatter(angles[:-1], (vals[:-1] + 0.02).clip(0, 1), s=25, color=point_color, zorder=4)

    # –¶–µ–Ω—Ç—Ä + –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    ax.text(0.5, 0.5, "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∫–æ–ª–µ—Å–æ", transform=ax.transAxes,
            ha="center", va="center", fontsize=12, color="#555", alpha=0.8)

    # –û—Ç—Å—Ç—É–ø—ã
    plt.tight_layout()
    return fig, ax


def render_png_and_pdf(scores: List[int]) -> Tuple[io.BytesIO, io.BytesIO]:
    """
    –†–∏—Å—É–µ—Ç –∫–æ–ª–µ—Å–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (png_bytes, pdf_bytes)
    """
    import matplotlib.pyplot as plt

    fig, ax = _build_figure(scores)

    # PNG
    png_buf = io.BytesIO()
    fig.savefig(png_buf, format="png", bbox_inches="tight")
    png_buf.seek(0)

    # PDF (—Ç–æ—Ç –∂–µ —Ä–∏—Å—É–Ω–æ–∫)
    pdf_buf = io.BytesIO()
    fig.savefig(pdf_buf, format="pdf", bbox_inches="tight")
    pdf_buf.seek(0)

    plt.close(fig)
    return png_buf, pdf_buf


# =============== –•–ï–ù–î–õ–ï–†–´ –ë–û–¢–ê ===============
def cmd_start(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_answers[user_id] = []

    kb = [["0", "1", "2", "3", "4", "5"]]
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ü–µ–Ω–∏–º –≤–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∫–æ–ª–µ—Å–æ –ø–æ 8 —Å—Ñ–µ—Ä–∞–º.\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ —á–∏—Å–ª–∞–º–∏ –æ—Ç 0 –¥–æ 5. –ü–æ–µ—Ö–∞–ª–∏!\n\n" + QUESTIONS[0],
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True),
    )
    return ASKING


def handle_score(update: Update, context: CallbackContext) -> int:
    text = (update.message.text or "").strip()
    user_id = update.effective_user.id

    if text not in {"0", "1", "2", "3", "4", "5"}:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 5.")
        return ASKING

    user_answers.setdefault(user_id, []).append(int(text))
    idx = len(user_answers[user_id])

    if idx < NUM_Q:
        kb = [["0", "1", "2", "3", "4", "5"]]
        update.message.reply_text(
            QUESTIONS[idx],
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True),
        )
        return ASKING

    # –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã
    scores = user_answers[user_id][:NUM_Q]
    user_answers.pop(user_id, None)

    # 1) PNG + PDF
    png_buf, pdf_buf = render_png_and_pdf(scores)

    # 2) –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
    summary = make_summary_text(scores)

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG —Å –ø–æ–¥–ø–∏—Å—å—é
    update.message.reply_photo(png_buf, caption=summary, reply_markup=ReplyKeyboardRemove())

    # 4) –ß–µ–∫-–ª–∏—Å—Ç
    checklist = make_checklist(scores)
    update.message.reply_text(checklist)

    # 5) PDF-–¥–æ–∫—É–º–µ–Ω—Ç (—É–¥–æ–±–Ω–æ —à–∞—Ä–∏—Ç—å)
    pdf_buf.name = "finance_wheel.pdf"  # —á—Ç–æ–±—ã —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–º—è —Ñ–∞–π–ª–∞ –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤—ã–º
    update.message.reply_document(pdf_buf, filename="finance_wheel.pdf")

    update.message.reply_text("–ì–æ—Ç–æ–≤–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å ‚Äî /start")
    return ConversationHandler.END


def cmd_cancel(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_answers.pop(user_id, None)
    update.message.reply_text("–û–∫–µ–π, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª. –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# =============== MAIN (polling) ===============
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={ASKING: [MessageHandler(Filters.text & ~Filters.command, handle_score)]},
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        per_user=True,
        per_chat=True,
        per_message=False,
    )
    dp.add_handler(conv)
    dp.add_handler(CommandHandler("cancel", cmd_cancel))

    # –ù–ò–ö–ê–ö–ò–• –≤–µ–±—Ö—É–∫–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ polling
    updater.start_polling(clean=True)
    log.info("Polling started ‚úÖ")
    updater.idle()


if __name__ == "__main__":
    main()
